package msg

import (
	"strconv"

	. "personaerpgcompanion/pkg/models"
)

func WelcomeMessage() string {

	msg := "–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç Personae ‚Äî –≤–∞—à –∫–æ–º–ø–∞–Ω—å–æ–Ω –≤ –º–∏—Ä–µ –ù–†–ò!"
	msg += "\n\n–°–µ–π—á–∞—Å –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ –¥–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. "
	msg += "–ß—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–∏ –∏–¥–µ–∏ –∏–ª–∏ –æ–±–æ–∑–Ω–∞—á–∏—Ç—å –æ—à–∏–±–∫—É –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º @gewiahr."
	msg += "\n\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help."

	return msg
}

func CommandNotFoundMessage() string {

	msg := "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –æ–ø–æ–∑–Ω–∞–Ω–∞!"
	msg += "\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –∫–æ–º–∞–Ω–¥–∞—Ö –±–æ—Ç–∞."

	return msg
}

func HelpMessage() string {

	msg := "‚öîÔ∏è –î–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ä—É–∂–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /w –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä—É–∂–∏—è."
	msg += "\nüëò –î–ª—è –ø–æ–∏—Å–∫–∞ –±—Ä–æ–Ω–∏ –∏ –æ–¥–µ–∂–¥—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /a –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–æ–Ω–∏ –∏–ª–∏ –æ–¥–µ–∂–¥—ã."
	msg += "\n"
	msg += "\n–ü–æ–∫–∞ —á—Ç–æ –±–æ—Ç –ø–æ–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ."

	return msg
}

func ComposeWeaponMessage(stats Weapon) string {
	msg := ""
	// Name group
	msg = stats.Name

	msg += "\n"
	for i := 0; i < len(stats.Name); i++ {
		msg += "="
	}

	// Main stats
	msg += "\n–£—Ä–æ–Ω: " + strconv.Itoa(stats.DMG)
	msg += "\n–°–º–µ—Ä—Ç–µ–ª—å–Ω–æ—Å—Ç—å: " + strconv.Itoa(stats.DLS)
	// Range
	msg += "\n–î–∏—Å—Ç–∞–Ω—Ü–∏—è: " + stats.RNG

	msg += "\n"

	// Skill
	msg += "\n–ù–∞–≤—ã–∫: " + stats.Skill
	// Grip
	if stats.Hand1 != "X" {
		if stats.Hand1 == "O" {
			msg += "\n–û–¥–Ω–æ—Ä—É—á–Ω–æ–µ"
		} else {
			msg += "\n–í –æ–¥–Ω–æ–π —Ä—É–∫–µ: " + stats.Hand1
		}
	}
	if stats.Hand2 != "X" {
		if stats.Hand2 == "O" {
			msg += "\n–î–≤—É—Ä—É—á–Ω–æ–µ"
		} else {
			msg += "\n–í –¥–≤—É—Ö —Ä—É–∫–∞—Ö: " + stats.Hand2
		}
	}

	msg += "\n"

	// Rarity
	msg += "\n–†–µ–¥–∫–æ—Å—Ç—å: " + strconv.Itoa(stats.Rarity)
	// Price
	msg += "\n–¶–µ–Ω–∞: " + strconv.Itoa(stats.Price)
	switch stats.Curr {
	case "z":
		msg += " –∑–µ–Ω–∏ (–º–µ–¥—å)"
		break
	case "b":
		msg += " –±—É (—Å–µ—Ä–µ–±—Ä–æ)"
		break
	case "k":
		msg += " –∫–æ–∫—É (–∑–æ–ª–æ—Ç–æ)"
		break
	}

	msg += "\n"

	// Qualities
	if stats.Qualities != "-" {
		msg += "\n–°–≤–æ–π—Å—Ç–≤–∞: " + stats.Qualities
	}
	msg += "\n"
	if stats.Additional != "-" {
		msg += "\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: \n" + stats.Additional
	}

	// Picture
	if len(stats.Pic) > 0 {
		msg += "\n" + stats.Pic
	}

	return msg
}

func ComposeArmorMessage(stats Armor) string {
	msg := ""
	// Name group
	msg = stats.Name

	msg += "\n"
	for i := 0; i < len(stats.Name); i++ {
		msg += "="
	}

	// Main stats
	if stats.Phys+stats.Super > 0 {
		msg += "\n–ó–∞—â–∏—Ç–∞"
		if stats.Phys > 0 {
			msg += "\n–§–∏–∑–∏—á–µ—Å–∫–∞—è: " + strconv.Itoa(stats.Phys)
		}
		if stats.Super > 0 {
			msg += "\n–°–≤–µ—Ä—Ö—ä–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è: " + strconv.Itoa(stats.Super)
		}
	}

	msg += "\n"

	// Rarity
	msg += "\n–†–µ–¥–∫–æ—Å—Ç—å: " + strconv.Itoa(stats.Rarity)
	// Price
	msg += "\n–¶–µ–Ω–∞: " + strconv.Itoa(stats.Price)
	switch stats.Curr {
	case "z":
		msg += " –∑–µ–Ω–∏ (–º–µ–¥—å)"
		break
	case "b":
		msg += " –±—É (—Å–µ—Ä–µ–±—Ä–æ)"
		break
	case "k":
		msg += " –∫–æ–∫—É (–∑–æ–ª–æ—Ç–æ)"
		break
	}

	msg += "\n"

	// Qualities
	if stats.Qualities != "-" {
		msg += "\n–°–≤–æ–π—Å—Ç–≤–∞: " + stats.Qualities
	}
	msg += "\n"
	if stats.Additional != "-" {
		msg += "\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: \n" + stats.Additional
	}

	// Picture
	if len(stats.Pic) > 0 {
		msg += "\n" + stats.Pic
	}

	return msg
}

func ComposeQualityMessage(stats Quality) string {
	msg := ""
	// Name group
	msg = stats.Name

	msg += "\n"
	for i := 0; i < len(stats.Name); i++ {
		msg += "="
	}

	msg += "\n"

	// Main
	msg += stats.General

	return msg
}
